package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"log"

	"github.com/chack-check/chats-service/api/v1/graph/model"
	"github.com/chack-check/chats-service/api/v1/services"
	"github.com/chack-check/chats-service/api/v1/utils"
	jwt "github.com/golang-jwt/jwt/v5"
)

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, request model.CreateMessageRequest) (*model.Message, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(request.ChatID), token)
	if err != nil {
		return nil, err
	}

	messagesManager := services.NewMessagesManager()
	message, err := messagesManager.CreateMessage(&request, chat, token)
	if err != nil {
		return nil, err
	}

	messageSchema := utils.DbMessageToSchema(*message)
	return &messageSchema, nil
}

// EditMessage is the resolver for the editMessage field.
func (r *mutationResolver) EditMessage(ctx context.Context, chatID int, messageID int, request model.ChangeMessageRequest) (*model.Message, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(chatID), token)
	if err != nil {
		return nil, err
	}

	messagesManager := services.NewMessagesManager()
	message, err := messagesManager.Update(chat, uint(messageID), request, token)
	if err != nil {
		return nil, err
	}

	messageSchema := utils.DbMessageToSchema(*message)
	return &messageSchema, nil
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, request model.CreateChatRequest) (*model.Chat, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chat, err := utils.ChatRequestToDbChat(&request)
	if err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	log.Printf("Creating chat: %v from request: %v", chat, request)
	log.Printf("Creating chat request user: %v", *request.User)
	err = chatsManager.Create(chat, token, uint(*request.User))
	if err != nil {
		return nil, err
	}

	chatSchema := utils.DbChatToSchema(*chat)
	return &chatSchema, nil
}

// AddChatMembers is the resolver for the addChatMembers field.
func (r *mutationResolver) AddChatMembers(ctx context.Context, chatID int, members []int) (*model.Chat, error) {
	panic(fmt.Errorf("not implemented: AddChatMembers - addChatMembers"))
}

// AddChatAdmins is the resolver for the addChatAdmins field.
func (r *mutationResolver) AddChatAdmins(ctx context.Context, chatID int, admins []int) (*model.Chat, error) {
	panic(fmt.Errorf("not implemented: AddChatAdmins - addChatAdmins"))
}

// EditChat is the resolver for the editChat field.
func (r *mutationResolver) EditChat(ctx context.Context, chatID int, request model.EditChatRequest) (*model.Chat, error) {
	panic(fmt.Errorf("not implemented: EditChat - editChat"))
}

// ReadMessage is the resolver for the readMessage field.
func (r *mutationResolver) ReadMessage(ctx context.Context, chatID int, messageID *int) (*model.Message, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(chatID), token)
	if err != nil {
		return nil, err
	}

	messagesManager := services.NewMessagesManager()
	message, err := messagesManager.Read(chat, uint(*messageID), token)
	if err != nil {
		return nil, err
	}

	messageSchema := utils.DbMessageToSchema(*message)
	return &messageSchema, nil
}

// ReactMessage is the resolver for the reactMessage field.
func (r *mutationResolver) ReactMessage(ctx context.Context, chatID int, messageID int, content string) (*model.Message, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return &model.Message{}, err
	}

	messagesManager := services.NewMessagesManager()
	message, err := messagesManager.ReactMessage(token, uint(chatID), uint(messageID), content)
	if err != nil {
		return &model.Message{}, err
	}

	messageSchema := utils.DbMessageToSchema(*message)
	return &messageSchema, nil
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, chatID int, messageID int, deleteFor model.DeleteForOptions) (*bool, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		isDeleted := false
		return &isDeleted, err
	}

	messagesManager := services.NewMessagesManager()
	err := messagesManager.DeleteMessage(token, uint(chatID), uint(messageID), services.DeleteForOptions(deleteFor.String()))
	if err != nil {
		isDeleted := false
		return &isDeleted, err
	}

	isDeleted := true
	return &isDeleted, nil
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, chatID int) (*bool, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		isDeleted := false
		return &isDeleted, err
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(chatID), token)
	if err != nil {
		isDeleted := false
		return &isDeleted, err
	}

	chatsManager.Delete(chat)
	isDeleted := true
	return &isDeleted, nil
}

// GetChatMessages is the resolver for the getChatMessages field.
func (r *queryResolver) GetChatMessages(ctx context.Context, chatID int, page *int, perPage *int) (*model.PaginatedMessages, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	var pageValue, perPageValue int = 1, 20
	if page != nil {
		pageValue = *page
	}
	if perPage != nil {
		perPageValue = *perPage
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(chatID), token)
	if err != nil {
		return nil, err
	}

	messagesManager := services.NewMessagesManager()
	paginatedMessages, err := messagesManager.GetChatAll(token, chat.ID, pageValue, perPageValue)
	if err != nil {
		return nil, err
	}

	var messages []*model.Message
	for _, message := range *paginatedMessages.Data {
		messageSchema := utils.DbMessageToSchema(message)
		messages = append(messages, &messageSchema)
	}

	return &model.PaginatedMessages{
		Page:     paginatedMessages.Page,
		NumPages: paginatedMessages.PagesCount,
		PerPage:  paginatedMessages.PerPage,
		Data:     messages,
	}, nil
}

// GetChats is the resolver for the getChats field.
func (r *queryResolver) GetChats(ctx context.Context, page *int, perPage *int) (*model.PaginatedChats, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	var pageValue, perPageValue int = 1, 20
	if page != nil {
		pageValue = *page
	}
	if perPage != nil {
		perPageValue = *perPage
	}

	chatsManager := services.NewChatsManager()
	paginatedChats := chatsManager.GetAll(token, pageValue, perPageValue)
	if paginatedChats == nil {
		return nil, fmt.Errorf("incorrect token")
	}

	var chats []*model.Chat
	for _, chat := range *paginatedChats.Data {
		chatSchema := utils.DbChatToSchema(*chat)
		chats = append(chats, &chatSchema)
	}

	return &model.PaginatedChats{
		Page:     paginatedChats.Page,
		NumPages: paginatedChats.PagesCount,
		PerPage:  paginatedChats.PerPage,
		Data:     chats,
	}, nil
}

// SearchChats is the resolver for the searchChats field.
func (r *queryResolver) SearchChats(ctx context.Context, query string, page *int, perPage *int) (*model.PaginatedChats, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	chats, err := chatsManager.Search(query, token, *page, *perPage)
	if err != nil {
		return nil, err
	}

	var chatsSchemas []*model.Chat
	for _, chat := range *chats.Data {
		chatSchema := utils.DbChatToSchema(*chat)
		chatsSchemas = append(chatsSchemas, &chatSchema)
	}

	return &model.PaginatedChats{
		Page:     chats.Page,
		NumPages: chats.PagesCount,
		PerPage:  chats.PerPage,
		Data:     chatsSchemas,
	}, nil
}

// GetChat is the resolver for the getChat field.
func (r *queryResolver) GetChat(ctx context.Context, chatID int) (*model.Chat, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	chatsManager := services.NewChatsManager()
	chat, err := chatsManager.GetConcrete(uint(chatID), token)

	if err != nil {
		return nil, err
	}

	response := utils.DbChatToSchema(*chat)
	return &response, nil
}

// GetChatAttachments is the resolver for the getChatAttachments field.
func (r *queryResolver) GetChatAttachments(ctx context.Context, chatID int, fileType model.FileType) (*model.FileObjectResponse, error) {
	panic(fmt.Errorf("not implemented: GetChatAttachments - getChatAttachments"))
}

// SearchMessages is the resolver for the searchMessages field.
func (r *queryResolver) SearchMessages(ctx context.Context, query *string, chatID *int, page *int, perPage *int) (*model.PaginatedMessages, error) {
	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}

	return &model.PaginatedMessages{
		Page:     1,
		NumPages: 1,
		PerPage:  20,
		Data:     []*model.Message{},
	}, nil
}

// GetLastMessagesForChats is the resolver for the getLastMessagesForChats field.
func (r *queryResolver) GetLastMessagesForChats(ctx context.Context, chatIds []int) ([]*model.Message, error) {
	if len(chatIds) > 100 {
		return nil, fmt.Errorf("max fetching chats is 100")
	}

	token, _ := ctx.Value("token").(*jwt.Token)
	if err := utils.UserRequired(token); err != nil {
		return nil, err
	}
	token_subject, err := services.GetTokenSubject(token)
	if err != nil {
		return nil, err
	}

	messages_service := services.NewMessagesManager()
	messages := messages_service.GetLastByChatIds(chatIds, token_subject.UserId)

	var messages_schemas []*model.Message
	for _, message := range messages {
		message_schema := utils.DbMessageToSchema(*message)
		messages_schemas = append(messages_schemas, &message_schema)
	}

	return messages_schemas, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
