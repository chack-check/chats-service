enum ChatType {
	group
	user
}

enum FileType {
  images
  videos
  documents
  music
  other
  all
}

enum MessageType {
  text
  event
  call
  voice
  circle
}

enum SystemFiletypesEnum {
  avatar
  file_in_chat
  voice
  circle
}

enum ActionTypes {
  writing
  audio_recording
  audio_sending
  circle_recording
  circle_sending
  files_sending
}

input UploadingFileMeta {
  url: String!
  filename: String!
  signature: String!
  systemFiletype: SystemFiletypesEnum!
}

input UploadingFile {
  original: UploadingFileMeta!
  converted: UploadingFileMeta
}

type SavedFile {
  originalUrl: String!
  originalFilename: String!
  convertedUrl: String
  convertedFilename: String
}

type Reaction {
  content: String!
  userId: Int!
}

type PaginatedFiles {
  page: Int!
  numPages: Int!
  perPage: Int!
  data: [SavedFile!]!
}

type Message {
	id: Int!
  type: MessageType!
	senderId: Int
	chatId: Int!
  content: String
	voice: SavedFile
	circle: SavedFile
	replyToId: Int
	readedBy: [Int!]
  reactions: [Reaction!]
  datetine: String!
  attachments: [SavedFile!]!
  mentioned: [Int!]
  datetime: String!
}

type ChatActionUser {
  name: String!
  id: Int!
}

type ChatAction {
  action: ActionTypes!
  actionUsers: [ChatActionUser!]
}

type Chat {
	id: Int!
	avatar: SavedFile!
	title: String!
	type: ChatType!
	members: [Int!]
	isArchived: Boolean!
  ownerId: Int!
  admins: [Int!]
  actions: [ChatAction!]
}

type PaginatedChats {
  page: Int!
  numPages: Int!
  perPage: Int!
  data: [Chat!]
}

input CreateChatRequest {
	avatar: UploadingFile
	title: String
	members: [Int!]
	user: Int
}

input EditChatRequest {
  avatar: UploadingFile
  title: String
}

input CreateMessageRequest {
	chatId: Int!
  type: MessageType!
	content: String
	voice: UploadingFile
	attachments: [UploadingFile!]
	replyToId: Int
	mentioned: [Int!]
	circle: UploadingFile
}

type CreateReactionRequest {
  content: String!
  messageId: Int!
}

input ChangeMessageRequest {
  content: String
  attachments: [UploadingFile!]
  mentioned: [Int]
}

type PaginatedMessages {
  page: Int!
  numPages: Int!
  perPage: Int!
  data: [Message!]
}

enum DeleteForOptions {
  ME
  ALL
}

type Query {
	getChatMessages(chatId: Int!, page: Int, perPage: Int): PaginatedMessages!
	getChats(page: Int, perPage: Int): PaginatedChats!
	getChat(chatId: Int!): Chat!
  getChatAttachments(chatId: Int!, fileType: FileType!): PaginatedFiles!
  getLastMessagesForChats(chatIds: [Int!]): [Message!]
}

type Mutation {
	createMessage(request: CreateMessageRequest!): Message!
  editMessage(chatId: Int!, messageId: Int!, request: ChangeMessageRequest!): Message!
  createChat(request: CreateChatRequest!): Chat!
  addChatMembers(chatId: Int!, members: [Int!]): Chat!
  addChatAdmins(chatId: Int!, admins: [Int!]): Chat!
  editChat(chatId: Int!, request: EditChatRequest!): Chat!
  readMessage(chatId: Int!, messageId: Int): Message!
  reactMessage(chatId: Int!, messageId: Int!, content: String!): Message!
  deleteMessage(chatId: Int!, messageId: Int!, deleteFor: DeleteForOptions!): Boolean
  deleteChat(chatId: Int!): Boolean
  deleteMessageReaction(chatId: Int!, messageId: Int!): Boolean
  sendUserAction(chatId: Int!, actionType: ActionTypes!, start: Boolean!): Boolean
}

schema {
  query: Query
  mutation: Mutation
}