// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChangeMessageRequest struct {
	Content     *string              `json:"content,omitempty"`
	Attachments []*FileObjectRequest `json:"attachments,omitempty"`
	Mentioned   []*int               `json:"mentioned,omitempty"`
}

type Chat struct {
	ID         int      `json:"id"`
	AvatarURL  string   `json:"avatarURL"`
	Title      string   `json:"title"`
	Type       ChatType `json:"type"`
	Members    []int    `json:"members,omitempty"`
	IsArchived bool     `json:"isArchived"`
	OwnerID    int      `json:"ownerId"`
	Admins     []int    `json:"admins,omitempty"`
}

type CreateChatRequest struct {
	Avatar  *FileObjectRequest `json:"avatar,omitempty"`
	Title   *string            `json:"title,omitempty"`
	Members []int              `json:"members,omitempty"`
	User    *int               `json:"user,omitempty"`
}

type CreateMessageRequest struct {
	ChatID      int                  `json:"chatId"`
	Type        MessageType          `json:"type"`
	Content     *string              `json:"content,omitempty"`
	Voice       *string              `json:"voice,omitempty"`
	Attachments []*FileObjectRequest `json:"attachments,omitempty"`
	ReplyToID   *int                 `json:"replyToId,omitempty"`
	Mentioned   []int                `json:"mentioned,omitempty"`
	Circle      *string              `json:"circle,omitempty"`
}

type CreateReactionRequest struct {
	Content   string `json:"content"`
	MessageID int    `json:"messageId"`
}

type EditChatRequest struct {
	Avatar *FileObjectRequest `json:"avatar,omitempty"`
	Title  *string            `json:"title,omitempty"`
}

type FileObjectRequest struct {
	Filename    string `json:"filename"`
	ContentType string `json:"contentType"`
	Content     string `json:"content"`
}

type FileObjectResponse struct {
	Filename    string `json:"filename"`
	ContentType string `json:"contentType"`
	FileURL     string `json:"fileURL"`
}

type Message struct {
	ID          int                   `json:"id"`
	Type        MessageType           `json:"type"`
	SenderID    *int                  `json:"senderId,omitempty"`
	ChatID      int                   `json:"chatId"`
	Content     *string               `json:"content,omitempty"`
	VoiceURL    *string               `json:"voiceURL,omitempty"`
	CircleURL   *string               `json:"circleURL,omitempty"`
	ReplyToID   *int                  `json:"replyToId,omitempty"`
	ReadedBy    []int                 `json:"readedBy,omitempty"`
	Reactions   []*Reaction           `json:"reactions,omitempty"`
	Datetine    string                `json:"datetine"`
	Attachments []*FileObjectResponse `json:"attachments,omitempty"`
	Mentioned   []int                 `json:"mentioned,omitempty"`
	Datetime    string                `json:"datetime"`
}

type PaginatedChats struct {
	Page     int     `json:"page"`
	NumPages int     `json:"numPages"`
	PerPage  int     `json:"perPage"`
	Data     []*Chat `json:"data,omitempty"`
}

type PaginatedFiles struct {
	Page     int                   `json:"page"`
	NumPages int                   `json:"numPages"`
	PerPage  int                   `json:"perPage"`
	Data     []*FileObjectResponse `json:"data,omitempty"`
}

type PaginatedMessages struct {
	Page     int        `json:"page"`
	NumPages int        `json:"numPages"`
	PerPage  int        `json:"perPage"`
	Data     []*Message `json:"data,omitempty"`
}

type Reaction struct {
	Content string `json:"content"`
	UserID  int    `json:"userId"`
}

type ChatType string

const (
	ChatTypeGroup ChatType = "group"
	ChatTypeUser  ChatType = "user"
)

var AllChatType = []ChatType{
	ChatTypeGroup,
	ChatTypeUser,
}

func (e ChatType) IsValid() bool {
	switch e {
	case ChatTypeGroup, ChatTypeUser:
		return true
	}
	return false
}

func (e ChatType) String() string {
	return string(e)
}

func (e *ChatType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatType", str)
	}
	return nil
}

func (e ChatType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FileType string

const (
	FileTypeImages    FileType = "images"
	FileTypeVideos    FileType = "videos"
	FileTypeDocuments FileType = "documents"
	FileTypeMusic     FileType = "music"
	FileTypeOther     FileType = "other"
	FileTypeAll       FileType = "all"
)

var AllFileType = []FileType{
	FileTypeImages,
	FileTypeVideos,
	FileTypeDocuments,
	FileTypeMusic,
	FileTypeOther,
	FileTypeAll,
}

func (e FileType) IsValid() bool {
	switch e {
	case FileTypeImages, FileTypeVideos, FileTypeDocuments, FileTypeMusic, FileTypeOther, FileTypeAll:
		return true
	}
	return false
}

func (e FileType) String() string {
	return string(e)
}

func (e *FileType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileType", str)
	}
	return nil
}

func (e FileType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageType string

const (
	MessageTypeText   MessageType = "text"
	MessageTypeEvent  MessageType = "event"
	MessageTypeCall   MessageType = "call"
	MessageTypeVoice  MessageType = "voice"
	MessageTypeCircle MessageType = "circle"
)

var AllMessageType = []MessageType{
	MessageTypeText,
	MessageTypeEvent,
	MessageTypeCall,
	MessageTypeVoice,
	MessageTypeCircle,
}

func (e MessageType) IsValid() bool {
	switch e {
	case MessageTypeText, MessageTypeEvent, MessageTypeCall, MessageTypeVoice, MessageTypeCircle:
		return true
	}
	return false
}

func (e MessageType) String() string {
	return string(e)
}

func (e *MessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageType", str)
	}
	return nil
}

func (e MessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
